cmd
type test.py = test.py 파일의 내용을 출력
ren[rename] test.py text.py = test.py파일을 text.py 파일로 이름을 변경

연산자
+   더하기
-    빼기
*    곱하기
/    나누기(실수)
//   나누기(정수)
%   나머지   (1%9 할때 앞의 숫자가 작은숫자라면 결과는 앞의 숫자가 나온다)
#    주석
==  관계연산자(참,거짓)
>    크다
<    작다
>=  크거나같다
<=  작거나같다
!=   같지않다
id(a)  a의 어드레스값 확인
2 ** 3 2의 3승

이스케이프 코드
\n	줄바꿈
\t 	탭간격 띄우기
\\	문자\
\'	작은 따옴표 표현
\"	큰 따옴표 표현


문자열 연산
a = "Python"
b = " is fun"
a + b	Python is fun
a * 2	PythonPython

인덱싱 = 문자열의 위치값을 반환
슬라이싱 = 문자열의 어느 구간을 자른다.

문자열 포멧코드
%d 정수값
%s 문자열(String)
%c 한개 문자(Character)
%f 소수(float)
%o 8진수
%x 16진수
%% 리터럴 %(문자 % 자체)

number = 3
day = "three"
"I eat %d apples %s days" %(number, day)
I eat 3 apples three days

"%10s" % "Hi"
'          Hi'

포멧함수 이용한포매팅
'I eat 3 apples. three days'
"I eat {0} apples. three days".format(3)
"I eat {0} apples. three days".format("three")
"I eat {0} apples.{1} days".format((3),("three"))
"I eat {0} apples.{1} {2}".format((3),("three"),(days))

.count
변수 해당 되는 문자의 개수 반환 함수
len()
글자수를 반환
.find('b')
'b'라는 글자가 몇번째에 있는지 반환
.index('t')
't'라는 글자의 위치값 반환
.join()
문자열을 삽입
",".join('abcd')
,를 abcd 중간에 삽입 한다
.upper()
소문자를 대문자로 변환
.lower()
대문자를 소문자로 변환
.capitalize()
단어의 첫 글자를 대문자로 치환
.title()
단어의 첫글자를 대문자로 치환
.lstrip()
가장 왼쪽 공백 삭제
.rstrip()
가장 오른쪽 공백 삭제
.strip()
가장 양끝의 공백 삭제
.replace("바뀌게 될 문자열", "바꿀 문자열") 
문자열 안의 특정 값을 다른값으로 치환
.split()
공백 또는 특정 문자열을 구분자로 해서 문자열 분리
type()
변수의 자료형을 반환
id()
변수의 주소값을 반환 (address)
str()
문자열로 바꿔주는 함수

리스트
리스트명 = [요소1, 요소2, 요소3,...]

인덱싱 = 위치값
슬라이싱 = 구간 자르기

슬라이싱
a = [1,2,3,4,5]
a[0:2], a[:2] # 0부터 2 미만까지 출력
[1, 2]
del a[0:2] #a리스트의 0번째부터 2-1 번째까지 삭제
a.sort() # 오름차순 정렬
a.sort(reverse=True) #내림차순 정렬
#True 와 False 첫글자 반드시 대문자
a.reverse() # 순서만 뒤에서부터 거꾸로 출력됨 내림차순 아님
a.index(3) # 리스트 요소의 3에 해당하는 인덱스의 위치값 반환
a.insert(0,4) # 리스트 a의 0번째 위치에 4를 삽입하는 함수
a.remove(3) # 리스트 a에서 처음으로 나오는 3을 삭제하는 함수
a.pop() # 리스트 a에서 마지막으로 입력된 값을 꺼내는함수
a.pop(1) # 리스트 인덱싱 1에 해당되는 값 출력
a.count(2) # 리스트 a안에 2의 갯수를 카운팅


#stack
push 삽입
pop 삭제
Last In First Out(후입선출)
#Queue
First In First Out(선입선출)

# underflow
스택 요소가 비어 있을때 pop(삭제시) 나오는 메세지
# overflow
스택 요소가 꽉 차 있을때 push(삽입시) 나오는 메세지

스택을 사용하는 경우 : 서브루틴호출(함수복귀),인터럽트, 후위연산(postfix)
* 인터럽트 : 프로그램 수행중에 예기치 못한 에러상황.(예: 정전, 멈춤 등)

선형구조 : 배열, 큐, 스택, 연속리스트, 연결리스트, 데크(큐+스택 장점)

비선형구조 : 트리, 그래프

큐(Queue) = 운영체제 스케줄링에 사용되는 방법

out					in
   ________________________________________________
<-ㅣ  ㅣ  ㅣ  ㅣ   ㅣ   ㅣ   ㅣ   ㅣ   ㅣ   ㅣ   ㅣ <-
   ------------------------------------------------
  Front(head)


스택 알고리즘 : 문제해결의 흐름을 기술하는것. 자연어, 순서도(Flowchart)
1.pop(삭제) S: 스택이름. 데이터: data, 크기: 4
 if  top = 0 then
  pop(S){ underflow }
 else : 그렇지 않으면
  remove S(top)
  { top = top - 1 }

2.push(삽입)
 if top = 4 then
  push(S){ overflow }
 else
  push S(top) = data
  { top = top + 1 }

리스트 [ ] 생성/삭제/수정 가능
튜플 ( )  값 변경 불가능

튜플은 1개의 요소만을 가질때는 요소 뒤에 콤마를 반드시 붙여야함 (1,)
프로그램이 실행되는 동안 값을 유지해야 한다면 튜플을, 수시로 값을 변경해야 하면 리스트 사용



딕셔너리

대응관계를 나타내는 자료형
Key와 Value를 한 싸응로 갖는 자료형
순차적으로 해당 요솟값을 구하지 않고, Key를 통해 Value를 바로 얻는 특징

{ Key1:Value1, Key2:Value2, Key3:Value3, ... }

딕셔너리 에서는 인덱싱 슬라이싱 지원 안됨
dic.items() # Key, value 쌍으로 얻기
dic.get() #Key값으로 value 얻기
dic.values() # value 값만 얻기
dic.clear() # 딕셔너리 내의 모든 요소 삭제
in #key가 딕셔너리 안에 있는지 조사
Key가 딕셔너리 안에 존재하면 True,존재하지 않으면 False반환

ex)
/*
 dic = { 'name' : 'pey', 'phone' : '0119993323', 'birth' : '1118'}
 'name' in dic
True
 'email' in dic
False
*/

제어문,반복문
for k in dic.keys()

집합 set

집합에 관련된 것을 쉽게 처리하기 위해 만든 자료형
집합 set은 중복을 허용하지 않는다. 순서가 없다.

ex)
/*
>>> s1 = set([1,2,3])
>>> s1
{1, 2, 3}
>>> s2 = set("Hello")
>>> s2
{'l', 'o', 'e', 'H'}
*/

교집합(&)

>>> s1 = set([1,2,3,4,5,6])
>>> s2 = set([4,5,6,7,8,9])
>>> s1
{1, 2, 3, 4, 5, 6}
>>> s2
{4, 5, 6, 7, 8, 9}
>>> s1 & s2
{4, 5, 6}

합집합(|)

>>> s1 | s2
{1, 2, 3, 4, 5, 6, 7, 8, 9}

>>> s2 - s1
{8, 9, 7}
>>> s1 - s2
{1, 2, 3}

#add() 집합 하나 추가, update() 한꺼번에 여러개 추가시 사용
#update() 여러개의 값을 한꺼번에 추가
#remove() 특정값을 제거

변수 값 변환
a = 3
b = 5

a, b = b, a
a = 5
b = 3

>= 조건이 둘중 하나만 만족하면 True, 둘 다 만족 안하면 False

>>> pocket = ['paper', 'cellphone', 'money']
>>> if 'money' in pocket:
...     pass
... else:
...     print("카드를 꺼내라")
>>>

pass
처리문을 나중에 작성하고 우선 지나가고자 할때

a = range(10)
range(0,10) 0~10 미만까지 (0~9까지)
a = range(100)
range(0,100) 0~100 미만까지(0~99까지)

인수 = 전달하는 값
매개편수(파라미터) = 전달받는 값

매개변수(parameter)는 함수에 입력으로 전달된 값을 받는 변수를 의미
인수(arguments)는 함수를 호출할 때 전달하는 입력값을 의미한다.
원칙적으로 서로 의미가 다르므로 실무에서 혼용해서 사용하면 안됨

def add(a, b): -> a,b는 매개변수
	return a + b -> 반환 값

print(add(a,b)) -> a, b는 인수


자료구조	연산 : A + B, + = 연산자, A,B = 피연산자
*수식의 표기법 : 	전위표기법(Prefix) : 연산자를 연속된 피연산자 앞에둠. +AB
		중위표기법(Infix) : 연산자를 양쪽 피연산자 중앙에 둠. A+B(인간)
		후위표기법(Postfix): 스택 사용. 연산자를 연속된 피연산자 뒤에둠. AB+

다음 Postifx 연산식에 대한 연산 결과를 쓰시오.
	3 4 * 5 6 * +
	(3 * 4) + (5 * 6)
	42

*스택사용 예) : 서브루틴 호출
인터럽트, postfix(후위표기식) 연산,함수 복귀

X = A + ( B + C / D ) x E - F (중위 표기식)

우선순위에 따라 괄호를 정하고, 해당 괄호안의 연산자를 해당 괄호 뒤로 빼준다. 답을 쓸때는 괄호를 모두 제거한다.

XABCD/+Ex+F-= (후위 표기식)