객체지향 프로그래밍 언어(O.O.P)

 현실 세계의 개체(Entity)를 기계의 부품처럼 하나의 객체로 만들어, 기계적인 부품들을 조립하여 제품을
만들 듯이 소프트웨어를 개발 할 때도 객체들을 조립해서 프로그램을 작성할 수 있도록 한 프로그래밍 기법이다.

 - 장점 : 상속을 통한 재사용과 시스템의 확장이 용이하다.
	이해를 쉽게 해준다. 코드의 재활용성이 높다.
	개발 및 유지보수가 용이하다. 

 - 종류 : JAVA, C++, Smalltalk 등

 * 객체지향 프로그래밍 언어의 구성 요소
  1. 객체(Object) : 하나의 클래스로부터 생성된 데이터(속성)와 이를 처리하기 위한 연산(메소드)을 결합시킨 실체이다.


	*속성(Attribute) : 한 클래스 내에 속한 객체들이 가지고 있는 데이터 값들의 성질
	*메소드(Method) : 함수, 연산, 오퍼레이션, 행위, 동작
			객체가 메시지를 받아 실행해야 할 객체의 구체적인 연산을 정의한 것

  2. 클래스(Class) : 공통된 특성과 행위를 갖는 객체의 집합이다.
		두 개 이상의 유사한 객체들을 묶어서 하나의 공통된 특성을 표현하는 요소이다.

	: 하나 이상의 유사한 객체들을 묶어서 하나의 공통된 특성을 표현한 것으로 데이터 추상화의 개념이다.
	객체들을 생성해주는 하나의 설계도(틀) 이다.  ex) 붕어빵 틀, 자동차 생산 라인

  3. 메시지(Message) : 객체들간에 상호작용을 하는데 사용되는 수단

  4. 추상화 : 객체지향분석에서 불필요한 부분을 생략하고,
	 객체의 속성 중 가장 중요한 것에만 중점을 두어 개략화(일반화) 시킨 것.
	데이터의 공통된 성질을 추출하여 슈퍼 클래스를 선정하는 개념이다.

  5. 상속(Inherirance) : 객체지향개념에서 이미 정의되어 있는 상위 클래스(슈퍼클래스 혹은 부모클래스)의 메소드를
		비롯한 모든 속성을 하위 클래스가 물려 받는 것.
		상속을 통해 하위 클래스는 상위 클래스의 모든 속성과 연산을 자신의 클래스 내에서
		다시 정의하지 않고서도 즉시 자신이 속성으로 사용할 수 있다.

	- 단일상속 : 하나의 상위 클래스로부터 속성과 메소드 등을 물려 받는 것.
	- 다중상속 : 두 개 이상의 상위클래스로부터 속성과 메소드 등을 물려 받는 것.

  6. 캡술화(Encapsulation) : 데이터(속성)와 데이터를 처리하는 함수(메소드)를 하나로 묶는 것
	캡술화된 객체의 세부 내용이 외부에 정보은닉(은폐)되어, 변경이 발생할 때 오류의 파급효과가 적다.
	캡술화된 객체들은 재사용이 용이하다.

  7. 정보은닉(Information Hiding) : 캡술화에서 가장 중요한 개념으로, 다른 객체에서 자신의 정보를 숨기고
			자신의 연산만을 통하여 접근을 허용하는 것.

  8. 다형성(Polymorphism) : 메시지에 의해 객체(클래스)가 연산을 수행하게 될 때, 하나의 메시지에 대해
		각 객체(클래스)가 가지고 있는 고유한 방법(특성)으로 응답 할 수 있는 능력을 의미한다.